What is Terraform?
Terraform is a tool for building, changing, and versioning infrastructure safely and efficiently. it is developed by Hashicorp & written in GoLang

Terraform is also known as infrastructure as code solution

Infrastructure as code?
in simple words provisioning / creating infrastructure with code

Infrastructure as code, or IaC, has gained a lot of momentum over the years because it helps solve several problems that trobeled infrastructure management in the past.


Terraform provisions, updates, and destroys infrastructure resources such as physical machines, VMs, network switches, containers, and more.

Configurations
code written for Terraform, using the human-readable HashiCorp Configuration Language (HCL) to describe the desired state of infrastructure resources.

Providers
The plugins that Terraform uses to manage those resources. Every supported service or infrastructure platform has a provider that defines which resources are available and performs API calls to manage those resources.

Modules
Reusable Terraform configurations that can be called and configured by other configurations. Most modules manage a few closely related resources from a single provider.

The Terraform Registry
makes it easy to use any provider or module. To use a provider or module from this registry, just add it to your configuration; when you run terraform init, Terraform will automatically download everything it needs.



How to use Terraform Variables - Locals,Input,Output

There are two types of variables in Terraform -

Simple values variable
Collection Variable

1.1 Simple Values variables
As the name suggests Simple Values variables are which hold only a single value. Here the types of Simple Value variables -

1. string
2. umber
3. bool

1.2 Collection Variable
In the collection variable, it consists of -

1. List
2. Map
3. Set

2.1 string variable type - We are going parameterized instance_type = "t2.micro"
The first rule to create a parameter in terraform file is by defining variable Block
variable "instance_type" {
   description = "Instance type t2.micro"
   type        = string
   default     = "t2.micro"
}


2.2 number variable type - We are going parameterized instance_count = 2
The next variable type we are going to take is number.

For example, we are going to increase the instance_count of the ec2_instances.

Let's create the variable first -

variable "instance_count" {
  description = "EC2 instance count"
  type        = number
  default     = 2
}  


2.3 boolean variable type - We are going parameterized enable_vpn_gateway = false
The next variable type which we are going to discuss is bool.

The bool variable can be used to set true or false values inside your terraform file.

Here is an example to create your bool variable -

variable "enable_public_ip" {
  description = "Enable public IP address"
  type        = bool
  default     = true
}



3. Terraform Variables - list, set, map
When it comes to collection input variables then we are talking about -

List
Map
Set
3.1 List variable type
As the name suggests we are going to define a list that will contain more than one element in it.

Let's define our first List variable -

Here is the list of IAM users

variable "user_names" {
  description = "IAM usernames"
  type        = list(string)
  default     = ["user1", "user2", "user3s"]
}


3.2 Map variable type
Terraform also supports the map variable type where you can define the key-valye pair.

Let's take an example where we need to define project and environment, so we can use the map variable to achieve that.

Here is an example of map variable -

variable "project_environment" {
  description = "project name and environment"
  type        = map(string)
  default     = {
    project     = "project-alpha",
    environment = "dev"
  }
}

Let's create a Terraform file

provider "aws" {
   region     = "eu-central-1"
   access_key = "<INSERT_YOUR_ACCESS_KEY>"
   secret_key = "<INSERT_YOUR_SECRET_KEY>"
}
resource "aws_instance" "ec2_example" {

   ami           = "ami-0767046d1677be5a0"
   instance_type =  "t2.micro"

   tags = var.project_environment

}


variable "project_environment" {
  description = "project name and environment"
  type        = map(string)
  default     = {
    project     = "project-alpha",
    environment = "dev"
  }
}


Terraform Output Variables
In Terraform, output variables allow you to easily extract information about the resources that were created by Terraform. 



output "instance_ip" {
   value = aws_instance.example.public_ip
}
cal

# You need to supply variable during the terraform init
terraform init -var-file=terraform.tfvars 

# You need to supply variable during the terraform plan
terraform plan -var-file=terraform.tfvars
 
# You need to supply variable during the terraform apply
terraform apply -var-file=terraform.tfvars 




Understanding terraform count, for_each and for loop

When working with "collection variables" in Terrafrom, you must understand "loops with count," "loops with for each,




What are terraform dynamic block?

with the help of terraform dynamic block we can reduce the number of line in the code 
Terraform Dynamic Block is important when you want to create multiple resources inside of similar types,
so instead of copy and pasting the same terraform configuration in the terraform file does not make sense and it is not feasible if you need to create hundreds of resources using terraform.

Syntax

variable "ingress_ports" {
  type = list(number)
  default = [ 443, 22, 8080, 9090, 5990 ]
}

variable "egress_ports" {
  type = list(number)
  default = [ 7000, 9000, 9292, 8000 ]
}

resource "aws_security_group" "allow_tls" {
  name        = "dev_sg"

  dynamic "ingress" {
    for_each = var.ingress_ports
    content {
        description      = "TLS from VPC"
        from_port        = ingress.value
        to_port          = ingress.value
        protocol         = "tcp"
        cidr_blocks      = ["98.87.76.56/32"]
    }
  }

  dynamic "egress" {
    for_each = var.egress_ports
    content {
        from_port        = egress.value
        to_port          = egress.value
        protocol         = "tcp"
        cidr_blocks      = ["0.0.0.0/0"]
    }
  }

  tags = {
    Name = "dev_sg"
  }
}



Terraform state locking using DynamoDB >>>>>

when two developers try to update the same terraform state file which is stored remotely(S3 Bucket).
we can not guarantee that incremental updates on terraform state files will be performed one after another. Any developer can update and push terraform state file at any point in time,
so there should be some provision to prevent a developer from writing or updating terraform file when it is already being used by another developer.


terraform {
    backend "s3" {
        bucket = "jhooq-terraform-s3-bucket"
        key    = "jhooq/terraform/remote/s3/terraform.tfstate"
        region     = "eu-central-1"
       dynamodb_table  = "dynamodb-state-locking"
    }
}



Terraform Command Lines
Terraform CLI tricks

terraform -install-autocomplete                  #Setup tab auto-completion, requires logging back in

Format and Validate Terraform code

terraform fmt                                    #format code per HCL canonical standard
terraform validate                               #validate code for syntax
terraform validate -backend=false                #validate code skip backend validation

Initialize your Terraform working directory

terraform init                                    #initialize directory, pull down providers
terraform init -get-plugins=false                 #initialize directory, do not download plugins
terraform init -verify-plugins=false              #initialize directory, do not verify plugins for Hashicorp signature

Plan, Deploy and Cleanup Infrastructure

terraform apply --auto-approve                    #apply changes without being prompted to enter "yes"
terraform destroy --auto-approve                  #destroy/cleanup deployment without being prompted for “yes”
terraform plan -out plan.out                      #output the deployment plan to plan.out
terraform apply plan.out                          #use the plan.out plan file to deploy infrastructure
terraform plan -destroy                           #outputs a destroy plan
terraform apply -target=aws_instance.my_ec2       #only apply/deploy changes to the targeted resource
terraform apply -var my_region_variable=us-east-1 #pass a variable via command-line while applying a configuration
terraform apply -lock=true                        #lock the state file so it can't be modified by any other Terraform apply or modification action(possible only where backend allows locking)
terraform apply refresh=false                     # do not reconcile state file with real-world resources(helpful with large complex deployments for saving deployment time)
terraform apply --parallelism=5                   #number of simultaneous resource operations
terraform refresh                                 #reconcile the state in Terraform state file with real-world resources
terraform providers                               #get information about providers used in current configuration

Terraform Workspaces

terraform workspace new mynewworkspace            #create a new workspace
terraform workspace select default                #change to the selected workspace
terraform workspace list                          #list out all workspaces

Terraform State Manipulation

terraform state show aws_instance.my_ec2          #show details stored in Terraform state for the resource
terraform state pull > terraform.tfstate          #download and output terraform state to a file
terraform state mv aws_iam_role.my_ssm_role module.custom_module #move a resource tracked via state to different module
terraform state replace-provider hashicorp/aws registry.custom.com/aws #replace an existing provider with another
terraform state list                              #list out all the resources tracked via the current state file
terraform state rm  aws_instance.myinstace        #unmanage a resource, delete it from Terraform state file

Terraform Import And Outputs

terraform import aws_instance.new_ec2_instance i-abcd1234          #import EC2 instance with id i-abcd1234 into the Terraform resource named "new_ec2_instance" of type "aws_instance"
terraform import 'aws_instance.new_ec2_instance[0]' i-abcd1234     #same as above, imports a real-world resource into an instance of Terraform resource
terraform output                                                   #list all outputs as stated in code
terraform output instance_public_ip                                # list out a specific declared output
terraform output -json                                             #list all outputs in JSON format

Terraform Miscelleneous commands

terraform version                                 #display Terraform binary version, also warns if version is old
terraform get -update=true                        #download and update modules in the "root" module.

Terraform Console(Test out Terraform interpolations)

echo 'join(",",["foo","bar"])' | terraform console #echo an expression into terraform console and see its expected result as output
echo '1 + 5' | terraform console #Terraform console also has an interactive CLI just enter "terraform console"
echo "aws_instance.my_ec2.public_ip" | terraform console #display the Public IP against the "my_ec2" Terraform resource as seen in the Terraform state file
Terraform Graph(Dependency Graphing)

terraform graph | dot -Tpng > graph.png #produce a PNG diagrams showing relationship and dependencies between Terraform resource in your configuration/code
Terraform Taint/Untaint(mark/unmark resource for recreation -> delete and then recreate)

terraform taint aws_instance.my_ec2 #taints resource to be recreated on next apply
terraform untaint aws_instance.my_ec2 #Remove taint from a resource
terraform force-unlock LOCK_ID #forcefully unlock a locked state file, LOCK_ID provided when locking the State file beforehand
Terraform Cloud

terraform login #obtain and save API token for Terraform cloud
terraform logout #Log out of Terraform Cloud, defaults to hostname app.terraform.io